import{r as p,c as r,a,b as e,w as t,F as i,d as n,e as o,o as c}from"./app.ece2968d.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const d={},u=a("h1",{id:"extensions",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#extensions","aria-hidden":"true"},"#"),n(" Extensions")],-1),g=a("p",null,[n("The Gridify library adds below extension methods to "),a("code",null,"IQueryable"),n(" and "),a("code",null,"IEnumerable"),n(" objects.")],-1),h=n("All Gridify extension methods can accept "),k=n("GridifyQuery"),y=n(" and "),m=n("GridifyMapper"),f=n(" as parameter. make sure to check the documentation of these classes for more information."),b=o(`<h2 id="applyfiltering" tabindex="-1"><a class="header-anchor" href="#applyfiltering" aria-hidden="true">#</a> ApplyFiltering</h2><p>You can use this method if you want to only apply <strong>filtering</strong> on a Quariable collection, DbSet or Enumerable list.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;name = John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>the main difference is in the first example, we are using a string to filter, that can be dynamicly generated or passed from end-user but in the second example, we should hard code the query for supported fields.</p>`,6),_=n("checkout the "),v=n("Filtering Operators"),x=n(" section for more information."),q=o(`<h2 id="applyordering" tabindex="-1"><a class="header-anchor" href="#applyordering" aria-hidden="true">#</a> ApplyOrdering</h2><p>You can use this method if you want to only apply <strong>ordering</strong> on a Quariable collection, DbSet or Enumerable list.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyOrdering</span><span class="token punctuation">(</span><span class="token string">&quot;name, age desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,5),w=n("checkout the "),Q=n("Ordering"),A=n(" section for more information."),G=o(`<h2 id="applypaging" tabindex="-1"><a class="header-anchor" href="#applypaging" aria-hidden="true">#</a> ApplyPaging</h2><p>You can use this method if you want to only apply <strong>paging</strong> on a Quariable collection, DbSet or Enumerable list.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyPaging</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="applyfilteringandordering" tabindex="-1"><a class="header-anchor" href="#applyfilteringandordering" aria-hidden="true">#</a> ApplyFilteringAndOrdering</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> on a Quariable collection or DbSet. this method accepts <code>IGridifyQuery</code>.</p><h2 id="applyorderingandpaging" tabindex="-1"><a class="header-anchor" href="#applyorderingandpaging" aria-hidden="true">#</a> ApplyOrderingAndPaging</h2><p>You can use this method if you want to apply <strong>ordering</strong> and <strong>paging</strong> on a Quariable collection or DbSet. this method accepts <code>IGridifyQuery</code>.</p><h2 id="applyfilteringorderingpaging" tabindex="-1"><a class="header-anchor" href="#applyfilteringorderingpaging" aria-hidden="true">#</a> ApplyFilteringOrderingPaging</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> and <strong>paging</strong> on a Quariable collection or DbSet. this method accepts <code>IGridifyQuery</code>.</p><h2 id="gridifyqueryable" tabindex="-1"><a class="header-anchor" href="#gridifyqueryable" aria-hidden="true">#</a> GridifyQueryable</h2><p>Like <a href="#ApplyFilteringOrderingPaging">ApplyFilteringOrderingPaging</a> but it returns a <code>QuaryablePaging&lt;T&gt;</code> that have an extra <code>int Count</code> value that can be used for pagination.</p><h2 id="gridify" tabindex="-1"><a class="header-anchor" href="#gridify" aria-hidden="true">#</a> Gridify</h2><p>This is an ALL-IN-ONE package, it accepts <code>IGridifyQuery</code>, applys filtering, ordering and paging and returns a <code>Paging&lt;T&gt;</code> object. this method is complitely optimized to be used with any <strong>Grid</strong> component.</p>`,15);function N(O,I){const s=p("RouterLink");return c(),r(i,null,[u,g,a("p",null,[h,e(s,{to:"/guide/gridifyQuery.html"},{default:t(()=>[k]),_:1}),y,e(s,{to:"/guide/gridifyMapper.html"},{default:t(()=>[m]),_:1}),f]),b,a("p",null,[_,e(s,{to:"/guide/filtering.html"},{default:t(()=>[v]),_:1}),x]),q,a("p",null,[w,e(s,{to:"/guide/ordering.html"},{default:t(()=>[Q]),_:1}),A]),G],64)}var P=l(d,[["render",N]]);export{P as default};
