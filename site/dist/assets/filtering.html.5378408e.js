import{e as a}from"./app.ece2968d.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const e={},t=a(`<h1 id="filtering-syntax" tabindex="-1"><a class="header-anchor" href="#filtering-syntax" aria-hidden="true">#</a> Filtering Syntax</h1><p>Gridify supports the following filtering operators:</p><h2 id="conditional-operators" tabindex="-1"><a class="header-anchor" href="#conditional-operators" aria-hidden="true">#</a> Conditional Operators</h2><table><thead><tr><th>Name</th><th>Operator</th><th>Usage example</th></tr></thead><tbody><tr><td>Equal</td><td><code>=</code></td><td><code>&quot;FieldName = Value&quot;</code></td></tr><tr><td>NotEqual</td><td><code>!=</code></td><td><code>&quot;FieldName !=Value&quot;</code></td></tr><tr><td>LessThan</td><td><code>&lt;</code></td><td><code>&quot;FieldName &lt; Value&quot;</code></td></tr><tr><td>GreaterThan</td><td><code>&gt;</code></td><td><code>&quot;FieldName &gt; Value&quot;</code></td></tr><tr><td>GreaterThanOrEqual</td><td><code>&gt;=</code></td><td><code>&quot;FieldName &gt;=Value&quot;</code></td></tr><tr><td>LessThanOrEqual</td><td><code>&lt;=</code></td><td><code>&quot;FieldName &lt;=Value&quot;</code></td></tr><tr><td>Contains - Like</td><td><code>=*</code></td><td><code>&quot;FieldName =*Value&quot;</code></td></tr><tr><td>NotContains - NotLike</td><td><code>!*</code></td><td><code>&quot;FieldName !*Value&quot;</code></td></tr><tr><td>StartsWith</td><td><code>^</code></td><td><code>&quot;FieldName ^ Value&quot;</code></td></tr><tr><td>NotStartsWith</td><td><code>!^</code></td><td><code>&quot;FieldName !^ Value&quot;</code></td></tr><tr><td>EndsWith</td><td><code>$</code></td><td><code>&quot;FieldName $ Value&quot;</code></td></tr><tr><td>NotEndsWith</td><td><code>!$</code></td><td><code>&quot;FieldName !$ Value&quot;</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you don&#39;t specify any value after <code>=</code> or <code>!=</code> operators, gridify search for the <code>default</code> and <code>null</code> values.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;name=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>
             p<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span>
             p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h2 id="special-operators" tabindex="-1"><a class="header-anchor" href="#special-operators" aria-hidden="true">#</a> Special Operators</h2><h3 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h3><p>Using logical operators we easily can create complex queries.</p><table><thead><tr><th>Name</th><th>Operator</th><th>Usage example</th></tr></thead><tbody><tr><td>AND</td><td><code>,</code></td><td><code>&quot;FirstName = Value, LastName = Value2&quot;</code></td></tr><tr><td>OR</td><td><code>|</code></td><td><code>&quot;FirstName=Value|LastName=Value2&quot;</code></td></tr><tr><td>Parenthesis</td><td><code>()</code></td><td><code>&quot;(FirstName=*Jo,Age&lt;30)|(FirstName!=Hn,Age&gt;30)&quot;</code></td></tr></tbody></table><h3 id="case-insensitive-operator-i" tabindex="-1"><a class="header-anchor" href="#case-insensitive-operator-i" aria-hidden="true">#</a> Case Insensitive Operator - /i</h3><p>The <strong>&#39;/i&#39;</strong> operator can be use after string values for case insensitive searches. You should only use this operator after the search value.</p><p>Example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;FirstName=John/i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this query matches with JOHN - john - John - jOHn ...</p><h2 id="escaping" tabindex="-1"><a class="header-anchor" href="#escaping" aria-hidden="true">#</a> Escaping</h2><p>Gridify have five special operators <code>, | ( ) /i</code> to handle complex queries and case-insensitive searchs. If you want to use these characters in your query values (after conditional operator), you should add a backslash <code>\\ </code> before them. having this regex could be helpfull <code>([(),|]|\\/i)</code>.</p><p>JavaScript escape example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">esc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([(),|]|\\/i)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Csharp escape example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token string">&quot;(test,test2)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> esc <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">&quot;([(),|]|\\/i)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\\\$1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// esc = \\(test\\,test2\\)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,20);function n(o,p){return t}var r=s(e,[["render",n]]);export{r as default};
