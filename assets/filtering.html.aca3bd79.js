import{r as o,o as c,c as l,b as s,a as t,w as e,F as r,d as p,e as n}from"./app.d8b64c72.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},d=p(`<h1 id="filtering" tabindex="-1"><a class="header-anchor" href="#filtering" aria-hidden="true">#</a> Filtering</h1><p>Gridify supports the following filtering operators:</p><h2 id="conditional-operators" tabindex="-1"><a class="header-anchor" href="#conditional-operators" aria-hidden="true">#</a> Conditional Operators</h2><table><thead><tr><th>Name</th><th>Operator</th><th>Usage example</th></tr></thead><tbody><tr><td>Equal</td><td><code>=</code></td><td><code>&quot;FieldName = Value&quot;</code></td></tr><tr><td>NotEqual</td><td><code>!=</code></td><td><code>&quot;FieldName !=Value&quot;</code></td></tr><tr><td>LessThan</td><td><code>&lt;</code></td><td><code>&quot;FieldName &lt; Value&quot;</code></td></tr><tr><td>GreaterThan</td><td><code>&gt;</code></td><td><code>&quot;FieldName &gt; Value&quot;</code></td></tr><tr><td>GreaterThanOrEqual</td><td><code>&gt;=</code></td><td><code>&quot;FieldName &gt;=Value&quot;</code></td></tr><tr><td>LessThanOrEqual</td><td><code>&lt;=</code></td><td><code>&quot;FieldName &lt;=Value&quot;</code></td></tr><tr><td>Contains - Like</td><td><code>=*</code></td><td><code>&quot;FieldName =*Value&quot;</code></td></tr><tr><td>NotContains - NotLike</td><td><code>!*</code></td><td><code>&quot;FieldName !*Value&quot;</code></td></tr><tr><td>StartsWith</td><td><code>^</code></td><td><code>&quot;FieldName ^ Value&quot;</code></td></tr><tr><td>NotStartsWith</td><td><code>!^</code></td><td><code>&quot;FieldName !^ Value&quot;</code></td></tr><tr><td>EndsWith</td><td><code>$</code></td><td><code>&quot;FieldName $ Value&quot;</code></td></tr><tr><td>NotEndsWith</td><td><code>!$</code></td><td><code>&quot;FieldName !$ Value&quot;</code></td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you don&#39;t specify any value after <code>=</code> or <code>!=</code> operators, Gridify search for the <code>default</code> and <code>null</code> values.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;name=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span>
             p<span class="token punctuation">.</span>Name <span class="token keyword">is</span> <span class="token keyword">null</span> <span class="token operator">||</span>
             p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h2 id="special-operators" tabindex="-1"><a class="header-anchor" href="#special-operators" aria-hidden="true">#</a> Special Operators</h2><h3 id="logical-operators" tabindex="-1"><a class="header-anchor" href="#logical-operators" aria-hidden="true">#</a> Logical Operators</h3><p>Using logical operators we easily can create complex queries.</p><table><thead><tr><th>Name</th><th>Operator</th><th>Usage example</th></tr></thead><tbody><tr><td>AND</td><td><code>,</code></td><td><code>&quot;FirstName = Value, LastName = Value2&quot;</code></td></tr><tr><td>OR</td><td><code>|</code></td><td><code>&quot;FirstName=Value|LastName=Value2&quot;</code></td></tr><tr><td>Parenthesis</td><td><code>()</code></td><td><code>&quot;(FirstName=*Jo,Age&lt;30)|(FirstName!=Hn,Age&gt;30)&quot;</code></td></tr></tbody></table><h3 id="case-insensitive-operator-i" tabindex="-1"><a class="header-anchor" href="#case-insensitive-operator-i" aria-hidden="true">#</a> Case Insensitive Operator - /i</h3><p>The <strong>&#39;/i&#39;</strong> operator can be use after string values for case insensitive searches. You should only use this operator after the search value.</p><p>Example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;FirstName=John/i&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this query matches with JOHN - john - John - jOHn ...</p><h2 id="escaping" tabindex="-1"><a class="header-anchor" href="#escaping" aria-hidden="true">#</a> Escaping</h2><p>Gridify have five special operators <code>, | ( ) /i</code> to handle complex queries and case-insensitive searches. If you want to use these characters in your query values (after conditional operator), you should add a backslash <code>\\ </code> before them. having this regex could be helpful <code>([(),|]|\\/i)</code>.</p><p>JavaScript escape example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">esc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([(),|\\\\]|\\/i)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$1&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Csharp escape example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token string">&quot;(test,test2)&quot;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> esc <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token string">&quot;([(),|\\\\]|\\/i)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\\\$1&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// esc = \\(test\\,test2\\)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="passing-indexes" tabindex="-1"><a class="header-anchor" href="#passing-indexes" aria-hidden="true">#</a> Passing Indexes</h2><p>Since version <code>v2.3.0</code>, Gridify support passing indexes to the sub collections. We can pass the index using the <code>[ ]</code> brackets. In the bellow example we want to filter data using <code>8th</code> index of our SubCollection.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> gm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>TargetType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;prop&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>SubCollection<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>SomeProp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> gq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyQuery</span>
<span class="token punctuation">{</span>
    Filter <span class="token operator">=</span> <span class="token string">&quot;prop[8] &gt; 10&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,23),k=n("Checkout "),m=n("Use Indexes on Sub-Collections"),h=n(" for more information."),b=s("h2",{id:"custom-operators",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#custom-operators","aria-hidden":"true"},"#"),n(" Custom Operators")],-1),g=s("p",null,[n("Sometimes the default Gridify operators are not enough, For example, if you need an operator for regex matching or when you are using the EntityFramework, you may want to use "),s("code",null,"EF.Functions.FreeText"),n(" rather than a LIKE with wildcards. In this case, you can define your own operators. (added in "),s("code",null,"v2.6.0"),n(")")],-1),f=n("To define a custom operator, you need to create a class that implements the "),v=s("code",null,"IGridifyOperator",-1),y=n(" interface. then you need to register it through the global "),x=n("CustomOperators"),q=n(" configuration."),w=p(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Custom operators must be start with the <code>#</code> character.</p></div><ul><li>FreeTextOperator Example:</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">FreeTextOperator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGridifyOperator</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;#=&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token return-type class-name">Expression<span class="token punctuation">&lt;</span>OperatorParameter<span class="token punctuation">&gt;</span></span> <span class="token function">OperatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> EF<span class="token punctuation">.</span>Functions<span class="token punctuation">.</span><span class="token function">FreeText</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>RegexMatchOperator Example:</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">RegexMatchOperator</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGridifyOperator</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;#%&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token return-type class-name">Expression<span class="token punctuation">&lt;</span>OperatorParameter<span class="token punctuation">&gt;</span></span> <span class="token function">OperatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Regex<span class="token punctuation">.</span><span class="token function">IsMatch</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>InOperator Example:</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">InOperator</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGridifyOperator</span></span>
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">GetOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;#In&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token return-type class-name">Expression<span class="token punctuation">&lt;</span>OperatorParameter<span class="token punctuation">&gt;</span></span> <span class="token function">OperatorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">,</span>StringSplitOptions<span class="token punctuation">.</span>RemoveEmptyEntries<span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// usage: .ApplyFiltering(&quot;name #In John;David;Felipe&quot;)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Registration Example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code> GridifyGlobalConfiguration<span class="token punctuation">.</span>CustomOperators<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>FreeTextOperator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 GridifyGlobalConfiguration<span class="token punctuation">.</span>CustomOperators<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>RegexMatchOperator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 GridifyGlobalConfiguration<span class="token punctuation">.</span>CustomOperators<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Register</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>InOperator<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,9);function O(_,F){const a=o("RouterLink");return c(),l(r,null,[d,s("p",null,[k,t(a,{to:"/guide/gridifyMapper.html#use-indexes-on-sub-collections"},{default:e(()=>[m]),_:1}),h]),b,g,s("p",null,[f,v,y,t(a,{to:"/guide/gridifyGlobalConfiguration.html#customoperators"},{default:e(()=>[x]),_:1}),q]),w],64)}var G=u(i,[["render",O]]);export{G as default};
