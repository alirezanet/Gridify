import{r as e,o as p,c as t,b as o,a as c,w as l,F as r,d as s,e as n}from"./app.d8b64c72.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},d=s(`<h1 id="gridifymapper" tabindex="-1"><a class="header-anchor" href="#gridifymapper" aria-hidden="true">#</a> GridifyMapper</h1><p>Internally Gridify is using an auto generated mapper that maps your string base field names to actual properties in your entities, but sometimes we don&#39;t want to support filtering or sorting on a specific field. If you want to control what field names are mapped to what properties, you can create a custom mapper.</p><p>To get a better understanding of how this works, consider the following example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// sample Entities</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> UserName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> FirstName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> LastName <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Password <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Contact</span> Contact <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Contact</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Address <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> PhoneNumber <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>In this example we want to:</p><ul><li>Generate default mappings</li><li>Ignore the <code>Password</code> property</li><li>Map the <code>address</code> and <code>mobile</code> to the Contact property</li><li>Make sure the userName value is always lowercase in the search</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">GenerateMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">RemoveMap</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>Address<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;mobile&quot;</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Contact<span class="token punctuation">.</span>PhoneNumber<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In the following, we will become more familiar with the above methods</p><h2 id="generatemappings" tabindex="-1"><a class="header-anchor" href="#generatemappings" aria-hidden="true">#</a> GenerateMappings</h2><p>This method generates mappings for the properties of the entity, including top-level public properties and properties of nested classes up to the specified nesting depth.</p><ul><li>To generate mappings for <strong>top-level public properties</strong> only, you can call this method without passing any arguments:</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">GenerateMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>To generate mappings with <strong>control over nesting depth</strong>, you can specify the <code>maxNestingDepth</code> parameter. This parameter limits how deep the mappings will be generated for nested classes. Set it to 0 for no nesting or a positive value to control the depth <code>(added in v2.11.0)</code>:</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token comment">// Generates mappings for top-level properties and properties of nested classes up to 2 levels deep.</span>
     <span class="token punctuation">.</span><span class="token function">GenerateMappings</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Another alternative to generate default mappings for top-level public properties is by passing true to the GridifyMapper constructor. This generates mappings without considering nesting depth.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></div><h2 id="removemap" tabindex="-1"><a class="header-anchor" href="#removemap" aria-hidden="true">#</a> RemoveMap</h2><p>This method removes mapping from the mapper. Usually you will use this method after you have generated the mappings to ignore some properties that you don&#39;t want to be supported by Gridify filtering or ordering actions.</p><h2 id="addmap" tabindex="-1"><a class="header-anchor" href="#addmap" aria-hidden="true">#</a> AddMap</h2><p>This method adds a mapping to the mapper.</p><ul><li>the first parameter is the name of the field you want to use in the string query</li><li>the second parameter is a property selector expression</li><li>the third parameter is an optional <a href="#value-convertor">value convertor</a> expression that you can use to convert user inputs to anything you want</li></ul><h3 id="value-convertor" tabindex="-1"><a class="header-anchor" href="#value-convertor" aria-hidden="true">#</a> Value convertor</h3><p>If you need to change your search values before the filtering operation you can use this feature, the third parameter of the GridifyMapper AddMap method accepts a function that you can use to convert the input values.</p><p>in the above example we want to convert the userName value to lowercase before the filtering operation.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>mapper <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> v <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="hasmap" tabindex="-1"><a class="header-anchor" href="#hasmap" aria-hidden="true">#</a> HasMap</h2><p>This method checks if the mapper has a mapping for the given field name.</p><h2 id="getcurrentmaps" tabindex="-1"><a class="header-anchor" href="#getcurrentmaps" aria-hidden="true">#</a> GetCurrentMaps</h2><p>This method returns list of current mappings.</p><h2 id="gridifymapperconfiguration" tabindex="-1"><a class="header-anchor" href="#gridifymapperconfiguration" aria-hidden="true">#</a> GridifyMapperConfiguration</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapperConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapperConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   CaseSensitive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
   AllowNullSearch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
   IgnoreNotMappedFields <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>mapperConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="casesensitive" tabindex="-1"><a class="header-anchor" href="#casesensitive" aria-hidden="true">#</a> CaseSensitive</h3><p>By default mapper is <code>Case-insensitive</code> but you can change this behavior if you need <code>Case-Sensitive</code> mappings.</p><ul><li>Type: <code>bool</code></li><li>Default: <code>false</code></li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>CaseSensitive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="ignorenotmappedfields" tabindex="-1"><a class="header-anchor" href="#ignorenotmappedfields" aria-hidden="true">#</a> IgnoreNotMappedFields</h3><p>By setting this to <code>true</code> Gridify don&#39;t throw an exception when a field name is not mapped. for instance, in the above example, searching for <code>password</code> will not throw an exception.</p><ul><li>Type: <code>bool</code></li><li>Default: <code>false</code></li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>IgnoreNotMappedFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="allownullsearch" tabindex="-1"><a class="header-anchor" href="#allownullsearch" aria-hidden="true">#</a> AllowNullSearch</h3><p>By setting this to <code>false</code>, Gridify don&#39;t allow searching on null values using the <code>null</code> keyword for values.</p><ul><li>Type: <code>bool</code></li><li>Default: <code>true</code></li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>AllowNullSearch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="sub-collections" tabindex="-1"><a class="header-anchor" href="#sub-collections" aria-hidden="true">#</a> Sub Collections</h2><h3 id="filtering-on-nested-collections" tabindex="-1"><a class="header-anchor" href="#filtering-on-nested-collections" aria-hidden="true">#</a> Filtering on Nested Collections</h3><p>You can use LINQ <code>Select</code> and <code>SelectMany</code> methods to filter your data using its nested collections.</p><p>In this example, we have 3 nested collections, but filtering will apply to the <code>Property1</code> of the third level.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>Level1<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;prop1&quot;</span><span class="token punctuation">,</span> l1 <span class="token operator">=&gt;</span> l1<span class="token punctuation">.</span>Level2List
            <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>l2 <span class="token operator">=&gt;</span> l2<span class="token punctuation">.</span>Level3List<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>l3 <span class="token operator">=&gt;</span> l3<span class="token punctuation">.</span>Property1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> level1List<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;prop1 = 123&quot;</span><span class="token punctuation">,</span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>if you have only two-level nesting, you don&#39;t need to use <code>SelectMany</code>.</p><h3 id="use-indexes-on-sub-collections" tabindex="-1"><a class="header-anchor" href="#use-indexes-on-sub-collections" aria-hidden="true">#</a> Use Indexes on Sub-Collections</h3><p>Since version <code>v2.3.0</code>, GridifyMapper <a href="#addmap">AddMap</a> method has a new overload that accepts a <code>index</code> parameter. In the bellow example we want to filter data using <code>8th</code> index of our SubCollection.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> gq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyQuery</span> <span class="token punctuation">{</span> Filter <span class="token operator">=</span> <span class="token string">&quot;prop[8] &gt; 10&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> gm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyMapper<span class="token punctuation">&lt;</span>TargetType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">AddMap</span><span class="token punctuation">(</span><span class="token string">&quot;prop&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>SubCollection<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>SomeProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,51),k=n("checkout "),m=n("Passing Indexes"),h=n(" for more information."),g=s(`<h2 id="getexpression" tabindex="-1"><a class="header-anchor" href="#getexpression" aria-hidden="true">#</a> GetExpression</h2><p>This method returns the selector expression that you can use it in LINQ queries.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">Expression<span class="token punctuation">&lt;</span>Func<span class="token punctuation">&lt;</span>Person<span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> selector <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">GetExpression</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="getlambdaexpression" tabindex="-1"><a class="header-anchor" href="#getlambdaexpression" aria-hidden="true">#</a> GetLambdaExpression</h2><p>This method returns the selector expression that you can use it in LINQ queries.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">LambdaExpression</span> selector <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">GetLambdaExpression</span><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,6);function b(v,y){const a=e("RouterLink");return p(),t(r,null,[d,o("p",null,[k,c(a,{to:"/guide/filtering.html#passing-indexes"},{default:l(()=>[m]),_:1}),h]),g],64)}var x=i(u,[["render",b]]);export{x as default};
