import{r as l,o as r,c as u,b as n,a,w as e,F as i,e as s,d as c}from"./app.d8b64c72.js";import{_ as k}from"./plugin-vue_export-helper.21dcd24c.js";const b={},d=n("h1",{id:"extensions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#extensions","aria-hidden":"true"},"#"),s(" Extensions")],-1),m=n("p",null,"The Gridify.Elasticsearch library adds almost the same extension methods as Gridify with some small differences.",-1),g=s("Most Gridify extension methods can accept "),h=s("GridifyQuery"),y=s(" and "),f=s("GridifyMapper"),_=s(" as parameter. Make sure to checkout the documentation of these classes for more information."),q=c(`<h2 id="applyfiltering" tabindex="-1"><a class="header-anchor" href="#applyfiltering" aria-hidden="true">#</a> ApplyFiltering</h2><p>You can use this method if you want to only apply <strong>filtering</strong> on the <code>SearchRequestDescriptor</code> descriptor.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SearchAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s
    <span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;name = John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>this will make the next Elasticsearch query:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET users/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;term&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;name.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,5),v=s("Checkout the "),w=s("Filtering Operators"),x=s(" section for more information."),j=c(`<h2 id="applyordering" tabindex="-1"><a class="header-anchor" href="#applyordering" aria-hidden="true">#</a> ApplyOrdering</h2><p>You can use this method if you want to only apply <strong>ordering</strong> on the <code>SearchRequestDescriptor</code> descriptor.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SearchAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s
    <span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ApplyOrdering</span><span class="token punctuation">(</span><span class="token string">&quot;name, age desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>this will make the next Elasticsearch query:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET users/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;sort&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name.keyword&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;asc&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;order&quot;</span><span class="token operator">:</span> <span class="token string">&quot;desc&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,5),G=s("Checkout the "),S=s("Ordering"),A=s(" section for more information."),T=c(`<h2 id="applypaging" tabindex="-1"><a class="header-anchor" href="#applypaging" aria-hidden="true">#</a> ApplyPaging</h2><p>You can use this method if you want to only apply <strong>paging</strong> on an the <code>SearchRequestDescriptor</code> descriptor.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">SearchAsync</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>User<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s
    <span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ApplyPaging</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>this will make the next Elasticsearch query:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>GET users/_search
<span class="token punctuation">{</span>
  <span class="token property">&quot;from&quot;</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
  <span class="token property">&quot;size&quot;</span><span class="token operator">:</span> <span class="token number">20</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="applyfilteringandordering" tabindex="-1"><a class="header-anchor" href="#applyfilteringandordering" aria-hidden="true">#</a> ApplyFilteringAndOrdering</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> on the <code>SearchRequestDescriptor</code> descriptor. This method accepts <code>IGridifyQuery</code>.</p>`,7),O=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(),n("span",{class:"token punctuation"},"{"),s(" Filter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name = John"'),n("span",{class:"token punctuation"},","),s(" OrderBy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name, age desc"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ApplyFilteringAndOrdering"),n("span",{class:"token punctuation"},"("),s("gq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br")])],-1),E=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"query"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"term"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"sort"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"asc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"age"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"desc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br")])],-1),Q=n("h2",{id:"applyorderingandpaging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#applyorderingandpaging","aria-hidden":"true"},"#"),s(" ApplyOrderingAndPaging")],-1),I=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(),n("span",{class:"token punctuation"},"{"),s(" OrderBy "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name, age desc"'),n("span",{class:"token punctuation"},","),s(" Page "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(" PageSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"20"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ApplyOrderingAndPaging"),n("span",{class:"token punctuation"},"("),s("gq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br")])],-1),J=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"sort"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"asc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"age"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"desc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"from"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"size"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"20"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br")])],-1),C=c('<p>You can use this method if you want to apply <strong>ordering</strong> and <strong>paging</strong> on the <code>SearchRequestDescriptor</code> descriptor. This method accepts <code>IGridifyQuery</code>.</p><h2 id="applyfilteringorderingpaging" tabindex="-1"><a class="header-anchor" href="#applyfilteringorderingpaging" aria-hidden="true">#</a> ApplyFilteringOrderingPaging</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> and <strong>paging</strong> on the <code>SearchRequestDescriptor</code> descriptor. This method accepts <code>IGridifyQuery</code>.</p>',3),F=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
   Filter `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name = John"'),n("span",{class:"token punctuation"},","),s(`
   OrderBy `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name, age desc"'),n("span",{class:"token punctuation"},","),s(`
   Page `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(`
   PageSize `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"20"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ApplyFilteringOrderingPaging"),n("span",{class:"token punctuation"},"("),s("gq"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br")])],-1),U=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"query"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"term"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"sort"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"asc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"age"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"desc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"from"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"40"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token property"},'"size"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"20"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br")])],-1),N=n("h2",{id:"toelasticsearchquery",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#toelasticsearchquery","aria-hidden":"true"},"#"),s(" ToElasticsearchQuery")],-1),P=n("p",null,"This extension can be useful if you need to apply additional filters to the query.",-1),z=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(),n("span",{class:"token punctuation"},"{"),s(" Filter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name = John"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" query "),n("span",{class:"token operator"},"="),s(" gq"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"ToElasticsearchQuery"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Query"),n("span",{class:"token punctuation"},"("),s("query"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br")])],-1),R=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"query"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"term"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br")])],-1),B=n("p",null,[s("The ability to build "),n("code",null,"Query"),s(" object can be useful, if you need to apply additional filtering to it. E.g. you need to restrict data according to the organization.")],-1),D=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(),n("span",{class:"token punctuation"},"{"),s(" Filter "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"name = John"'),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" query "),n("span",{class:"token operator"},"="),s(" gq"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"ToElasticsearchQuery"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
query `),n("span",{class:"token operator"},"&="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"TermQuery"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"organizationId"'),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(" Value "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Query"),n("span",{class:"token punctuation"},"("),s("query"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br")])],-1),Y=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"query"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token property"},'"bool"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"must"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token property"},'"term"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token property"},'"Name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
              `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"John"'),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
          `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"{"),s(`
          `),n("span",{class:"token property"},'"term"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token property"},'"organizationId"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
              `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"123"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
          `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br")])],-1),V=n("h2",{id:"toelasticsearchsortoptions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#toelasticsearchsortoptions","aria-hidden":"true"},"#"),s(" ToElasticsearchSortOptions")],-1),M=n("p",null,"This extension can be useful if you need to apply additional sorting to the query.",-1),L=n("div",{class:"language-csharp ext-cs line-numbers-mode"},[n("pre",{class:"language-csharp"},[n("code",null,[n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" gq "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s(),n("span",{class:"token punctuation"},"{"),s(" OrderBy "),n("span",{class:"token operator"},"="),s(" ordering "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token class-name"},[n("span",{class:"token keyword"},"var")]),s(" sort "),n("span",{class:"token operator"},"="),s(" gq"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"ToElasticsearchSortOptions"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"await"),s(" client"),n("span",{class:"token punctuation"},"."),n("span",{class:"token generic-method"},[n("span",{class:"token function"},"SearchAsync"),n("span",{class:"token generic class-name"},[n("span",{class:"token punctuation"},"<"),s("User"),n("span",{class:"token punctuation"},">")])]),n("span",{class:"token punctuation"},"("),s("s "),n("span",{class:"token operator"},"=>"),s(` s
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Index"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"users"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"Sort"),n("span",{class:"token punctuation"},"("),s("sort"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br")])],-1),H=n("div",{class:"language-json ext-json line-numbers-mode"},[n("pre",{class:"language-json"},[n("code",null,[s(`GET users/_search
`),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},'"sort"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"name.keyword"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"asc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token property"},'"age"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token property"},'"order"'),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},'"desc"'),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br")])],-1);function K(W,X){const p=l("RouterLink"),t=l("CodeGroupItem"),o=l("CodeGroup");return r(),u(i,null,[d,m,n("p",null,[g,a(p,{to:"/guide/elasticsearch/gridifyQuery.html"},{default:e(()=>[h]),_:1}),y,a(p,{to:"/guide/elasticsearch/gridifyMapper.html"},{default:e(()=>[f]),_:1}),_]),q,n("p",null,[v,a(p,{to:"/guide/elasticsearch/filtering.html"},{default:e(()=>[w]),_:1}),x]),j,n("p",null,[G,a(p,{to:"/guide/elasticsearch/ordering.html"},{default:e(()=>[S]),_:1}),A]),T,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[O]),_:1}),a(t,{title:"JSON"},{default:e(()=>[E]),_:1})]),_:1}),Q,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[I]),_:1}),a(t,{title:"JSON"},{default:e(()=>[J]),_:1})]),_:1}),C,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[F]),_:1}),a(t,{title:"JSON"},{default:e(()=>[U]),_:1})]),_:1}),N,P,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[z]),_:1}),a(t,{title:"JSON"},{default:e(()=>[R]),_:1})]),_:1}),B,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[D]),_:1}),a(t,{title:"JSON"},{default:e(()=>[Y]),_:1})]),_:1}),V,M,a(o,null,{default:e(()=>[a(t,{title:"C#"},{default:e(()=>[L]),_:1}),a(t,{title:"JSON"},{default:e(()=>[H]),_:1})]),_:1})],64)}var nn=k(b,[["render",K]]);export{nn as default};
