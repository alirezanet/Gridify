import{r as o,o as p,c as l,a,w as e,F as r,b as s,e as n,d as u}from"./app.d8b64c72.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const d={},k=s("h1",{id:"ordering",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ordering","aria-hidden":"true"},"#"),n(" Ordering")],-1),m=s("p",null,[n("The ordering query expression can be built with a comma-delimited ordered list of field/property names followed by "),s("strong",null,[s("code",null,"asc")]),n(" or "),s("strong",null,[s("code",null,"desc")]),n(" keywords.")],-1),b=s("p",null,"By default, if you don't add these keywords, Gridify assumes you need Ascending ordering.",-1),g=s("p",null,"ascending and descending",-1),y=s("div",{class:"language-csharp ext-cs line-numbers-mode"},[s("pre",{class:"language-csharp"},[s("code",null,[s("span",{class:"token comment"},"// asc - desc"),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" x "),s("span",{class:"token operator"},"="),n(" personsRepo"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"ApplyOrdering"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},'// default ascending its equal to "Id asc"'),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" x "),s("span",{class:"token operator"},"="),n(" personsRepo"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"ApplyOrdering"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id desc"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// use descending ordering"),n(`

`),s("span",{class:"token comment"},"// multiple orderings example"),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" x "),s("span",{class:"token operator"},"="),n(" personsRepo"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"ApplyOrdering"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id desc, FirstName asc, LastName"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br")])],-1),h=s("div",{class:"language-csharp ext-cs line-numbers-mode"},[s("pre",{class:"language-csharp"},[s("code",null,[s("span",{class:"token comment"},"// asc - desc"),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" gq "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" OrderBy "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Id"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},'// default ascending its equal to "Id asc"'),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" gq "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" OrderBy "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Id desc"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// use descending ordering"),n(`

`),s("span",{class:"token comment"},"// multiple orderings example"),n(`
`),s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" gq "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},"GridifyQuery"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token punctuation"},"{"),n(" OrderBy "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token string"},'"Id desc, FirstName asc, LastName"'),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br")])],-1),f=s("div",{class:"language-csharp ext-cs line-numbers-mode"},[s("pre",{class:"language-csharp"},[s("code",null,[s("span",{class:"token class-name"},[s("span",{class:"token keyword"},"var")]),n(" builder "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token keyword"},"new"),n(),s("span",{class:"token constructor-invocation class-name"},[n("QueryBuilder"),s("span",{class:"token punctuation"},"<"),n("Person"),s("span",{class:"token punctuation"},">")]),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token comment"},"// asc - desc"),n(`
builder`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"AddOrderBy"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},'// default ascending its equal to "Id asc"'),n(`
builder`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"AddOrderBy"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id desc"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(),s("span",{class:"token comment"},"// use descending ordering"),n(`

`),s("span",{class:"token comment"},"// multiple orderings example"),n(`
builder`),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"AddOrderBy"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},'"Id desc, FirstName asc, LastName"'),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";"),n(`
`)])]),s("div",{class:"line-numbers"},[s("span",{class:"line-number"},"1"),s("br"),s("span",{class:"line-number"},"2"),s("br"),s("span",{class:"line-number"},"3"),s("br"),s("span",{class:"line-number"},"4"),s("br"),s("span",{class:"line-number"},"5"),s("br"),s("span",{class:"line-number"},"6"),s("br"),s("span",{class:"line-number"},"7"),s("br")])],-1),v=u(`<h2 id="order-by-nullable-types" tabindex="-1"><a class="header-anchor" href="#order-by-nullable-types" aria-hidden="true">#</a> Order By Nullable types</h2><p>Sometimes we need to order by nullable types, for example:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>personsRepo<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>BirthDate<span class="token punctuation">.</span>HasValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>to support this behavior, you can use Gridify special characters (<code>?</code> or <code>!</code>) after the property name.</p><p>e.g:</p><p>To achieve the <code>personsRepo.OrderBy(p =&gt; p.BirthDate.HasValue)</code> query, you can use <code>?</code>:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyOrdering</span><span class="token punctuation">(</span><span class="token string">&quot;BirthDate?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>and for <code>personsRepo.OrderBy(p =&gt; !p.BirthDate.HasValue)</code>, you can use <code>!</code>:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyOrdering</span><span class="token punctuation">(</span><span class="token string">&quot;BirthDate!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>These nullable characters only work on nullable types.</p></div>`,10);function _(w,x){const t=o("CodeGroupItem"),c=o("CodeGroup");return p(),l(r,null,[k,m,b,g,a(c,null,{default:e(()=>[a(t,{title:"Extensions"},{default:e(()=>[y]),_:1}),a(t,{title:"GridifyQuery"},{default:e(()=>[h]),_:1}),a(t,{title:"QueryBuilder"},{default:e(()=>[f]),_:1})]),_:1}),v],64)}var I=i(d,[["render",_]]);export{I as default};
