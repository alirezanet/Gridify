import{r as p,o,c,b as s,a as t,w as e,F as l,e as n,d as i}from"./app.d8b64c72.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},d=s("h1",{id:"compile-and-reuse",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#compile-and-reuse","aria-hidden":"true"},"#"),n(" Compile and Reuse")],-1),k=n("You can access Gridify generated expressions using the "),g=s("code",null,"GetFilteringExpression",-1),m=n(" of "),h=n("GridifyQuery"),y=n(" or "),b=s("code",null,"BuildCompiled",-1),x=n(" methods of "),f=n("QueryBuilder"),_=n(" class, by storing an expression you can use it multiple times without having any overheads, also if you store a compiled expression you get a massive performance boost."),v=i(`<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You should only use a <strong>compiled</strong> expression (delegate) if you are <strong>not</strong> using Gridify alongside an ORM like Entity-Framework.</p></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// eg.1 - using GridifyQuery - Compiled - where only</span>
<span class="token class-name"><span class="token keyword">var</span></span> gq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">GridifyQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> Filter <span class="token operator">=</span> <span class="token string">&quot;name=John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> expression <span class="token operator">=</span> gq<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetFilteringExpression</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> compiledExpression <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>compiledExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// eg.2 - using QueryBuilder - Compiled - where only</span>
<span class="token class-name"><span class="token keyword">var</span></span> compiledExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryBuilder<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">&quot;name=John&quot;</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">BuildFilteringExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> persons<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>compiledExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// eg.3 - using QueryBuilder - BuildCompiled</span>
<span class="token class-name"><span class="token keyword">var</span></span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">QueryBuilder<span class="token punctuation">&lt;</span>Person<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">AddCondition</span><span class="token punctuation">(</span><span class="token string">&quot;name=John&quot;</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">BuildCompiled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>persons<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h2><p>This is the performance improvement example when you use a compiled expression.</p><table><thead><tr><th>Method</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Ratio</th><th style="text-align:right;">RatioSD</th><th style="text-align:right;">Gen 0</th><th style="text-align:right;">Gen 1</th><th style="text-align:right;">Allocated</th></tr></thead><tbody><tr><td>GridifyCompiled</td><td style="text-align:right;">1.008 us</td><td style="text-align:right;">0.001</td><td style="text-align:right;">0.00</td><td style="text-align:right;">0.1564</td><td style="text-align:right;">-</td><td style="text-align:right;">984 B</td></tr><tr><td>Gridify</td><td style="text-align:right;">689.329 us</td><td style="text-align:right;">1.000</td><td style="text-align:right;">0.00</td><td style="text-align:right;">5.8594</td><td style="text-align:right;">2.9297</td><td style="text-align:right;">39,924 B</td></tr><tr><td>NativeLINQ</td><td style="text-align:right;">736.854 us</td><td style="text-align:right;">1.019</td><td style="text-align:right;">0.01</td><td style="text-align:right;">5.8594</td><td style="text-align:right;">2.9297</td><td style="text-align:right;">37,392 B</td></tr></tbody></table>`,7);function w(B,C){const a=p("RouterLink");return o(),c(l,null,[d,s("p",null,[k,g,m,t(a,{to:"/guide/gridifyQuery.html"},{default:e(()=>[h]),_:1}),y,b,x,t(a,{to:"/guide/queryBuilder.html"},{default:e(()=>[f]),_:1}),_]),v],64)}var q=r(u,[["render",w]]);export{q as default};
