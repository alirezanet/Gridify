import{_ as i,c as a,a3 as t,o as e}from"./chunks/framework.CcqIaAxI.js";const g=JSON.parse('{"title":"Gridify (v1)","description":"","frontmatter":{"search":false},"headers":[],"relativePath":"v1/index.md","filePath":"v1/index.md"}'),n={name:"v1/index.md"};function l(h,s,p,r,d,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="gridify-v1" tabindex="-1">Gridify (v1) <a class="header-anchor" href="#gridify-v1" aria-label="Permalink to &quot;Gridify (v1)&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Gridify version <strong>1.x.x</strong> is no longer maintained. you should consider upgrading to the latest version.</p></div><p>The source code of this version is available on <a href="https://github.com/alirezanet/Gridify/tree/version-1.x" target="_blank" rel="noreferrer">version-1.x</a></p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Easy and optimized way to apply <strong>Filtering</strong>, <strong>Sorting</strong> and <strong>pagination</strong> using text-based data.</p><p>The best use case of this library is Asp-net APIs. when you need to get some string base filtering conditions to filter data or sort it by a field name or apply pagination concepts to your lists and return a <strong>pageable</strong>, data grid ready information, from any repository or database.</p><hr><h2 id="webapi-simple-usage-example" tabindex="-1">WebApi Simple Usage example <a class="header-anchor" href="#webapi-simple-usage-example" aria-label="Permalink to &quot;WebApi Simple Usage example&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ApiController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Produces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Paging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;))]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IActionResult</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetPersons</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GridifyQuery</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Gridify =&gt; Filter,Sort &amp; Apply Paging</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in short, Gridify returns data especially for data Grids.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDbContext.Persons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gridify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gQuery);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>complete request sample:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://exampleDomain.com/api/GetPersons?pageSize=100&amp;page=1&amp;sortBy=FirstName&amp;isSortAsc=false&amp;filter=Age%3D%3D10</span></span></code></pre></div><p>also we can totally ignore GridifyQuery</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://exampleDomain.com/api/GetPersons</span></span></code></pre></div><hr><h2 id="what-is-gridifyquery-basic-usage-example" tabindex="-1">What is GridifyQuery (basic usage example) <a class="header-anchor" href="#what-is-gridifyquery-basic-usage-example" aria-label="Permalink to &quot;What is GridifyQuery (basic usage example)&quot;">​</a></h2><p>GridifyQuery is a simple class for configuring Filtering,Paging,Sorting.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// usually, we don&#39;t need to create this object manually</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// for example, we get this object as a parameter from our API Controller</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gQuery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GridifyQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FirstName==John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IsSortAsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PageSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SortBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;LastName&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Paging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         myDbContext.Persons  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// we can use Any list or repository or EntityFramework context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gridify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gQuery); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Filter,Sort &amp; Apply Paging</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pData.TotalItems =&gt; Count persons with &#39;John&#39;, First name</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pData.Items      =&gt; First 20 Persons with &#39;John&#39;, First Name</span></span></code></pre></div><h2 id="applyfiltering" tabindex="-1">ApplyFiltering <a class="header-anchor" href="#applyfiltering" aria-label="Permalink to &quot;ApplyFiltering&quot;">​</a></h2><p>Also, if you don&#39;t need paging and sorting features simply use <code>ApplyFiltering</code> extension instead of <code>Gridify</code>.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDbContext.Persons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyFiltering</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name == John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this is equal to :</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myDbContext.Persons.Where(p =&gt; p.Name == &quot;John&quot;);</span></span></code></pre></div><h3 id="see-more-examples-in-the-tests" tabindex="-1">see more examples in the <a href="https://github.com/alirezanet/Gridify/blob/ca492ca943c3406c8a5f4c130097ee2e6d7e06ec/test/Core.Tests/GridifyExtensionsShould.cs#L22" target="_blank" rel="noreferrer">tests</a> <a class="header-anchor" href="#see-more-examples-in-the-tests" aria-label="Permalink to &quot;see more examples in the [tests](https://github.com/alirezanet/Gridify/blob/ca492ca943c3406c8a5f4c130097ee2e6d7e06ec/test/Core.Tests/GridifyExtensionsShould.cs#L22)&quot;">​</a></h3><hr><h2 id="performance-comparison" tabindex="-1">Performance comparison <a class="header-anchor" href="#performance-comparison" aria-label="Permalink to &quot;Performance comparison&quot;">​</a></h2><p>Filtering is the most expensive feature in gridify. the below benchmark is comparing filtering in the most known dynamic linq libraries. as you can see, gridify has the closest result to the native linq. also, I Should note other features like Pagination and Sorting has almost zero overhead in Gridify.</p><p>BenchmarkDotNet=v0.13.0, OS=Windows 10.0.19043.1110 (21H1/May2021Update) 11th Gen Intel Core i5-11400F 2.60GHz, 1 CPU, 12 logical and 6 physical cores .NET SDK=5.0.301 [Host] : .NET 5.0.7 (5.0.721.25508), X64 RyuJIT</p><table tabindex="0"><thead><tr><th>Method</th><th style="text-align:right;">Mean</th><th style="text-align:right;">Error</th><th style="text-align:right;">StdDev</th><th style="text-align:right;">Ratio</th><th style="text-align:right;">RatioSD</th><th style="text-align:right;">Gen 0</th><th style="text-align:right;">Gen 1</th><th style="text-align:right;">Allocated</th></tr></thead><tbody><tr><td>Native Linq</td><td style="text-align:right;">869.3 us</td><td style="text-align:right;">10.54 us</td><td style="text-align:right;">9.86 us</td><td style="text-align:right;">1.00</td><td style="text-align:right;">0.00</td><td style="text-align:right;">5.8594</td><td style="text-align:right;">2.9297</td><td style="text-align:right;">36 KB</td></tr><tr><td>Gridify</td><td style="text-align:right;">928.1 us</td><td style="text-align:right;">13.41 us</td><td style="text-align:right;">11.89 us</td><td style="text-align:right;">1.07</td><td style="text-align:right;">0.02</td><td style="text-align:right;">6.8359</td><td style="text-align:right;">2.9297</td><td style="text-align:right;">46 KB</td></tr><tr><td>Dynamic Linq</td><td style="text-align:right;">1,068.5 us</td><td style="text-align:right;">10.66 us</td><td style="text-align:right;">9.97 us</td><td style="text-align:right;">1.23</td><td style="text-align:right;">0.02</td><td style="text-align:right;">19.5313</td><td style="text-align:right;">9.7656</td><td style="text-align:right;">122 KB</td></tr><tr><td>Sieve</td><td style="text-align:right;">1,126.8 us</td><td style="text-align:right;">10.73 us</td><td style="text-align:right;">10.04 us</td><td style="text-align:right;">1.30</td><td style="text-align:right;">0.02</td><td style="text-align:right;">8.7891</td><td style="text-align:right;">3.9063</td><td style="text-align:right;">54 KB</td></tr></tbody></table><hr><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Install the <a href="https://www.nuget.org/packages/Gridify/" target="_blank" rel="noreferrer">Gridify NuGet Package.</a></p><p><strong>Package Manager Console</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Install-Package Gridify</span></span></code></pre></div><p><strong>.NET Core CLI</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dotnet add package Gridify</span></span></code></pre></div><hr><h2 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;Extensions&quot;">​</a></h2><p>The library adds below extension methods to <code>IQueryable</code>:</p><table tabindex="0"><thead><tr><th>Extension</th><th>Description</th></tr></thead><tbody><tr><td>ApplyFiltering (string)</td><td>Apply Filtering using a raw <code>string</code> and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyFiltering (GridifyQuery)</td><td>Apply Filtering using <code>string Filter</code> property of <code>GridifyQuery</code> class and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyOrdering</td><td>Apply Ordering using <code>string SortBy</code> and <code>bool IsSortAsc</code> properties of <code>GridifyQuery</code> class and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyPaging</td><td>Apply paging using <code>short Page</code> and <code>int PageSize</code> properties of <code>GridifyQuery</code> class and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyOrderingAndPaging</td><td>Apply Both Ordering and paging and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyFilterAndOrdering</td><td>Apply Both Filtering and Ordering and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>ApplyEverything</td><td>Apply Filtering,Ordering and paging and returns an <code>IQueryable&lt;T&gt;</code></td></tr><tr><td>GridifyQueryable</td><td>Like ApplyEverything but it returns a <code>QueryablePaging&lt;T&gt;</code> that have an extra <code>int totalItems</code> property to use for pagination</td></tr><tr><td>Gridify</td><td>Receives a <code>GridifyQuery</code> ,Load All requested data and returns <code>Paging&lt;T&gt;</code></td></tr></tbody></table><p><strong>TIP</strong>:</p><p><code>Gridify</code> function is an <em>ALL-IN-ONE package</em>, that applies <strong>filtering</strong> and <strong>ordering</strong> and <strong>paging</strong> to your data and returns a <code>Paging&lt;T&gt;</code>,</p><p>but for example, if you need to just filter your data without paging or sorting options you can use <code>ApplyFiltering</code> function instead.</p><hr><h2 id="supported-filtering-operators" tabindex="-1">Supported Filtering Operators <a class="header-anchor" href="#supported-filtering-operators" aria-label="Permalink to &quot;Supported Filtering Operators&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Operator</th><th>Usage example</th></tr></thead><tbody><tr><td>Equal</td><td><code>==</code></td><td><code>&quot;FieldName ==Value&quot;</code></td></tr><tr><td>NotEqual</td><td><code>!=</code></td><td><code>&quot;FieldName !=Value&quot;</code></td></tr><tr><td>LessThan</td><td><code>&lt;</code></td><td><code>&quot;FieldName &lt; Value&quot;</code></td></tr><tr><td>GreaterThan</td><td><code>&gt;</code></td><td><code>&quot;FieldName &gt; Value&quot;</code></td></tr><tr><td>GreaterThanOrEqual</td><td><code>&gt;=</code></td><td><code>&quot;FieldName &gt;=Value&quot;</code></td></tr><tr><td>LessThanOrEqual</td><td><code>&lt;=</code></td><td><code>&quot;FieldName &lt;=Value&quot;</code></td></tr><tr><td>Contains - Like</td><td><code>=*</code></td><td><code>&quot;FieldName =*Value&quot;</code></td></tr><tr><td>NotContains - NotLike</td><td><code>!*</code></td><td><code>&quot;FieldName !*Value&quot;</code></td></tr><tr><td>StartsWith</td><td><code>^</code></td><td><code>&quot;FieldName ^ Value&quot;</code></td></tr><tr><td>NotStartsWith</td><td><code>!^</code></td><td><code>&quot;FieldName !^ Value&quot;</code></td></tr><tr><td>EndsWith</td><td><code>$</code></td><td><code>&quot;FieldName $ Value&quot;</code></td></tr><tr><td>NotEndsWith</td><td><code>!$</code></td><td><code>&quot;FieldName !$ Value&quot;</code></td></tr><tr><td>AND - &amp;&amp;</td><td><code>,</code></td><td><code>&quot;FirstName ==Value, LastName ==Value2&quot;</code></td></tr><tr><td>OR - ||</td><td><code>|</code></td><td><code>&quot;FirstName==Value|LastName==Value2&quot;</code></td></tr><tr><td>Parenthesis</td><td><code>()</code></td><td><code>&quot;(FirstName=*Jo,Age&lt;30)|(FirstName!=Hn,Age&gt;30)&quot;</code></td></tr></tbody></table><p>we can easily create complex queries using Parenthesis<code>()</code> with AND (<code>,</code>) + OR (<code>|</code>) operators.</p><p><strong>Escape character hint</strong>:</p><p>Filtering has four special character <code>, | ( )</code> to handle complex queries. if you want to use these characters in your query values (after <code>==</code>), you should add a backslash <code>\\ </code> before them.</p><p>JavaScript escape example:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> esc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[(),|]</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Csharp escape example:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(test,test2)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> esc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;([(),|])&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// esc = \\(test\\,test2\\)</span></span></code></pre></div><hr><h2 id="custom-mapping-support" tabindex="-1">Custom Mapping Support <a class="header-anchor" href="#custom-mapping-support" aria-label="Permalink to &quot;Custom Mapping Support&quot;">​</a></h2><p>By default Gridify is using a <code>GridifyMapper</code> object that automatically maps your string based field names to actual properties in your Entities but if you have a custom <strong>DTO</strong> (Data Transfer Object) you can create a custom instance of <code>GridifyMapper</code> and use it to create your mappings.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// example Entities</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LastName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// example DTO</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonDTO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LastName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//// GridifyMapper Usage example -------------</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customMappings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GridifyMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // because FirstName and LastName is exists in both DTO and Entity classes we can Generate them</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GenerateMappings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // add custom mappings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.Contact.Address )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PhoneNumber&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">q</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> q.Contact.PhoneNumber );</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// as i mentioned before. usually we don&#39;t need create this object manually.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gQuery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GridifyQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FirstName==John,Address=*st&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    IsSortAsc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SortBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PhoneNumber&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// myRepository: could be entity framework context or any other collections</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gridifiedData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myRepository.Persons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gridify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gQuery, customMappings);</span></span></code></pre></div><p>by default <code>GridifyMapper</code> is <code>Case-insensitive</code> but you can change this behavior if you need <code>Case-Sensitive</code> mappings.</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> customMappings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GridifyMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mapper is case-sensitive now.</span></span></code></pre></div><hr><h2 id="combine-gridify-with-automapper" tabindex="-1">Combine Gridify with AutoMapper <a class="header-anchor" href="#combine-gridify-with-automapper" aria-label="Permalink to &quot;Combine Gridify with AutoMapper&quot;">​</a></h2><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AutoMapper ProjectTo + Filtering Only, example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDbContext.Persons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyFiltering</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gridifyQuery);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProjectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonDTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// AutoMapper ProjectTo + Filtering + Ordering + Paging, example</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QueryablePaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDbContext.Persons.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GridifyQueryable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gridifyQuery);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Paging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; () { Items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qp.Query.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProjectTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonDTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), TotalItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qp.TotalItems };</span></span></code></pre></div><h2 id="entityframework-integration" tabindex="-1">EntityFramework integration <a class="header-anchor" href="#entityframework-integration" aria-label="Permalink to &quot;EntityFramework integration&quot;">​</a></h2><p>if you need to use gridify <strong>async</strong> feature for entityFramework Core, use <strong><code>Gridify.EntityFramework</code></strong> package instead.</p><p>this package have two additional <code>GridifyAsync()</code> and <code>GridifyQueryableAsync()</code> functions.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Gridify.EntityFramework</span></span></code></pre></div><hr><h2 id="contribution" tabindex="-1">Contribution <a class="header-anchor" href="#contribution" aria-label="Permalink to &quot;Contribution&quot;">​</a></h2><p>Any Contribution to improve documentation and library is appreciated feel free to send pull-Request. ❤️</p>`,66)]))}const y=i(n,[["render",l]]);export{g as __pageData,y as default};
