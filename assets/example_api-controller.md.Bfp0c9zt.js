import{_ as s,c as e,a3 as a,o as t}from"./chunks/framework.CcqIaAxI.js";const g=JSON.parse('{"title":"Using Gridify in API Controllers","description":"","frontmatter":{},"headers":[],"relativePath":"example/api-controller.md","filePath":"example/api-controller.md"}'),n={name:"example/api-controller.md"};function r(l,i,p,o,h,d){return t(),e("div",null,i[0]||(i[0]=[a(`<h1 id="using-gridify-in-api-controllers" tabindex="-1">Using Gridify in API Controllers <a class="header-anchor" href="#using-gridify-in-api-controllers" aria-label="Permalink to &quot;Using Gridify in API Controllers&quot;">​</a></h1><p>When working with ASP.NET APIs, especially when you need to apply string-based filtering conditions, sorting based on field names, or implementing pagination functionality, the Gridify library is a valuable tool. It can be used in any .NET project and with any type of collection, not just limited to ASP.NET projects.</p><p>To demonstrate the core concepts of Gridify, let&#39;s look at a simple implementation in the following example.</p><h2 id="describing-the-scenario" tabindex="-1">Describing the Scenario <a class="header-anchor" href="#describing-the-scenario" aria-label="Permalink to &quot;Describing the Scenario&quot;">​</a></h2><p>Imagine you have an API that returns a list of users. You want to use this API in your client-side application to display a list of users.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserController</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IEnumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // context can be Entity Framework, a repository, or whatever.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.Users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><em>However, there are a few challenges:</em></p><ul><li>The end-user may want to sort the list by name, age, or any other property.</li><li>The end-user may want to filter the list by name, age, or any other property.</li><li>Fetching the entire list of users is not efficient, so you need to add pagination.</li><li>Returning a list of page size N is not enough. You also need to know the total number of users.</li></ul><p>Implementing these features can be complex and messy. If you want to support multiple properties, you would need to write a lot of code with if-else statements. This is where Gridify comes in.</p><h2 id="solving-problems-using-gridify" tabindex="-1">Solving Problems Using Gridify <a class="header-anchor" href="#solving-problems-using-gridify" aria-label="Permalink to &quot;Solving Problems Using Gridify&quot;">​</a></h2><p>With Gridify, you can simplify your code and implement the required features in just a few lines:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Paging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GridifyQuery</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.Users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gridify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(query);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Gridify handles all the complexity behind the scenes.</p><h2 id="what-is-the-paging-return-value" tabindex="-1">What is the Paging Return Value? <a class="header-anchor" href="#what-is-the-paging-return-value" aria-label="Permalink to &quot;What is the Paging Return Value?&quot;">​</a></h2><p>The <code>Paging</code> class is a generic Data Transfer Object (DTO) that has two properties:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Count { get; set; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IEnumerable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Data { get; set; }</span></span></code></pre></div><p>The <code>Count</code> property indicates the total number of records, while the <code>Data</code> property contains the records on the current page.</p><h2 id="what-is-gridifyquery" tabindex="-1">What is GridifyQuery? <a class="header-anchor" href="#what-is-gridifyquery" aria-label="Permalink to &quot;What is GridifyQuery?&quot;">​</a></h2><p><code>GridifyQuery</code> is a class that represents the query parameters passed to the <code>Gridify</code> method.</p><p><a href="./../guide/gridifyQuery">Learn more about GridifyQuery</a>.</p><h2 id="sample-request-query-string" tabindex="-1">Sample Request Query String <a class="header-anchor" href="#sample-request-query-string" aria-label="Permalink to &quot;Sample Request Query String&quot;">​</a></h2><p>Please note that this URL is not encoded. Always remember to encode query strings before passing them to your APIs.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://exampleDomain.com/api/GetUsers?</span></span>
<span class="line"><span>          pageSize=100&amp;</span></span>
<span class="line"><span>          page=1&amp;</span></span>
<span class="line"><span>          orderBy=FirstName&amp;</span></span>
<span class="line"><span>          filter=Age&gt;10</span></span></code></pre></div><p>Alternatively, you can ignore the <code>GridifyQuery</code> and use the default pagination values, which are <code>pageSize=20</code> and <code>page=1</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://exampleDomain.com/api/GetUsers</span></span></code></pre></div><h2 id="more-information" tabindex="-1">More Information <a class="header-anchor" href="#more-information" aria-label="Permalink to &quot;More Information&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>If you want to control which fields are supported for filtering or ordering, you can use the <a href="./../guide/gridifyMapper">GridifyMapper</a> class.</li><li>All <a href="./../guide/extensions">Gridify extension methods</a> accept a <code>GridifyMapper</code> instance as a parameter.</li><li>If you want to learn more about the <a href="./../guide/filtering">filtering</a> and <a href="./../guide/ordering">ordering</a> syntax, be sure to read the related documentation.</li></ul></div>`,27)]))}const k=s(n,[["render",r]]);export{g as __pageData,k as default};
