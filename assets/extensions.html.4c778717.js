import{r as p,o as r,c as i,b as a,a as s,w as o,F as c,e as n,d as t}from"./app.d8b64c72.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const d={},u=a("h1",{id:"extensions",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#extensions","aria-hidden":"true"},"#"),n(" Extensions")],-1),g=a("p",null,[n("The Gridify library adds below extension methods to "),a("code",null,"IQueryable"),n(" objects.")],-1),h=n("All Gridify extension methods can accept "),y=n("GridifyQuery"),k=n(" and "),m=n("GridifyMapper"),f=n(" as a parameter. Make sure to checkout the documentation of these classes for more information."),b=t(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you want to use Gridify extension methods on an <code>IEnumerable</code> object, use <code>.AsQueryable()</code> first.</p></div><h2 id="applyfiltering" tabindex="-1"><a class="header-anchor" href="#applyfiltering" aria-hidden="true">#</a> ApplyFiltering</h2><p>You can use this method if you want to only apply <strong>filtering</strong> on a <code>IQueriable</code> or <code>DbSet</code>.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyFiltering</span><span class="token punctuation">(</span><span class="token string">&quot;name = John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>the main difference is in the first example, we are using a string to filter, that can be dynamicly generated or passed from end-user but in the second example, we should hard code the query for supported fields.</p>`,7),_=n("Checkout the "),v=n("Filtering Operators"),x=n(" section for more information."),w=t(`<h2 id="applyordering" tabindex="-1"><a class="header-anchor" href="#applyordering" aria-hidden="true">#</a> ApplyOrdering</h2><p>You can use this method if you want to only apply <strong>ordering</strong> on an <code>IQueriable</code> collection or <code>DbSet</code>.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyOrdering</span><span class="token punctuation">(</span><span class="token string">&quot;name, age desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ThenByDescending</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>Age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,5),q=n("Checkout the "),Q=n("Ordering"),I=n(" section for more information."),A=t(`<h2 id="applypaging" tabindex="-1"><a class="header-anchor" href="#applypaging" aria-hidden="true">#</a> ApplyPaging</h2><p>You can use this method if you want to only apply <strong>paging</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">ApplyPaging</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>this is completely equivalent to the bellow LINQ query:</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> query <span class="token operator">=</span> personsRepo<span class="token punctuation">.</span><span class="token function">Skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="applyfilteringandordering" tabindex="-1"><a class="header-anchor" href="#applyfilteringandordering" aria-hidden="true">#</a> ApplyFilteringAndOrdering</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="applyorderingandpaging" tabindex="-1"><a class="header-anchor" href="#applyorderingandpaging" aria-hidden="true">#</a> ApplyOrderingAndPaging</h2><p>You can use this method if you want to apply <strong>ordering</strong> and <strong>paging</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="applyfilteringorderingpaging" tabindex="-1"><a class="header-anchor" href="#applyfilteringorderingpaging" aria-hidden="true">#</a> ApplyFilteringOrderingPaging</h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> and <strong>paging</strong> on a <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="gridifyqueryable" tabindex="-1"><a class="header-anchor" href="#gridifyqueryable" aria-hidden="true">#</a> GridifyQueryable</h2><p>Like <a href="#ApplyFilteringOrderingPaging">ApplyFilteringOrderingPaging</a> but it returns a <code>QueryablePaging&lt;T&gt;</code> that have an extra <code>int Count</code> value that can be used for pagination.</p><h2 id="gridify" tabindex="-1"><a class="header-anchor" href="#gridify" aria-hidden="true">#</a> Gridify</h2><p>This is an ALL-IN-ONE package, it accepts <code>IGridifyQuery</code>, applies filtering, ordering, and paging, and returns a <code>Paging&lt;T&gt;</code> object. This method is completely optimized to be used with any <strong>Grid</strong> component.</p>`,15);function G(T,N){const e=p("RouterLink");return r(),i(c,null,[u,g,a("p",null,[h,s(e,{to:"/guide/gridifyQuery.html"},{default:o(()=>[y]),_:1}),k,s(e,{to:"/guide/gridifyMapper.html"},{default:o(()=>[m]),_:1}),f]),b,a("p",null,[_,s(e,{to:"/guide/filtering.html"},{default:o(()=>[v]),_:1}),x]),w,a("p",null,[q,s(e,{to:"/guide/ordering.html"},{default:o(()=>[Q]),_:1}),I]),A],64)}var P=l(d,[["render",G]]);export{P as default};
