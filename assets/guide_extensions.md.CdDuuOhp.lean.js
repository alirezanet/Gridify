import{_ as s,c as a,a3 as e,o as t}from"./chunks/framework.CcqIaAxI.js";const g=JSON.parse('{"title":"Extensions","description":"","frontmatter":{},"headers":[],"relativePath":"guide/extensions.md","filePath":"guide/extensions.md"}'),n={name:"guide/extensions.md"};function p(h,i,r,l,o,d){return t(),a("div",null,i[0]||(i[0]=[e('<h1 id="extensions" tabindex="-1">Extensions <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;Extensions&quot;">​</a></h1><p>The Gridify library adds the below extension methods to <code>IQueryable</code> objects.</p><p>All Gridify extension methods can accept <a href="./gridifyQuery">GridifyQuery</a> and <a href="./gridifyMapper">GridifyMapper</a> as a parameter. Make sure to check out the documentation of these classes for more information.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to use Gridify extension methods on an <code>IEnumerable</code> object, use <code>.AsQueryable()</code> first.</p></div><h2 id="applyfiltering" tabindex="-1">ApplyFiltering <a class="header-anchor" href="#applyfiltering" aria-label="Permalink to &quot;ApplyFiltering&quot;">​</a></h2><p>You can use this method if you want to only apply <strong>filtering</strong> on an <code>IQueriable</code> or <code>DbSet</code>.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyFiltering</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name = John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>this is completely equivalent to the below LINQ query:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>In the <code>ApplyFiltering</code> method, we can use a raw string to filter the data, which can be generated dynamically or passed by the end-user for example through an API client or console input, but using the Linq <code>Where</code> method, we always have to hard code the query for the supported fields.</p><p>Check out the <a href="./filtering">Filtering Operators</a> section for more information.</p><h2 id="applyordering" tabindex="-1">ApplyOrdering <a class="header-anchor" href="#applyordering" aria-label="Permalink to &quot;ApplyOrdering&quot;">​</a></h2><p>You can use this method if you want to only apply <strong>ordering</strong> on an <code>IQueriable</code> collection or <code>DbSet</code>.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyOrdering</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name, age desc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>this is completely equivalent to the below LINQ query:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.Name).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThenByDescending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.Age);</span></span></code></pre></div><p>Check out the <a href="./ordering">Ordering</a> section for more information.</p><h2 id="applypaging" tabindex="-1">ApplyPaging <a class="header-anchor" href="#applypaging" aria-label="Permalink to &quot;ApplyPaging&quot;">​</a></h2><p>You can use this method if you want to only apply <strong>paging</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>.</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplyPaging</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>this is completely equivalent to the below LINQ query:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> personsRepo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Skip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="applyfilteringandordering" tabindex="-1">ApplyFilteringAndOrdering <a class="header-anchor" href="#applyfilteringandordering" aria-label="Permalink to &quot;ApplyFilteringAndOrdering&quot;">​</a></h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="applyorderingandpaging" tabindex="-1">ApplyOrderingAndPaging <a class="header-anchor" href="#applyorderingandpaging" aria-label="Permalink to &quot;ApplyOrderingAndPaging&quot;">​</a></h2><p>You can use this method if you want to apply <strong>ordering</strong> and <strong>paging</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="applyfilteringorderingpaging" tabindex="-1">ApplyFilteringOrderingPaging <a class="header-anchor" href="#applyfilteringorderingpaging" aria-label="Permalink to &quot;ApplyFilteringOrderingPaging&quot;">​</a></h2><p>You can use this method if you want to apply <strong>filtering</strong> and <strong>ordering</strong> and <strong>paging</strong> on an <code>IQueryable</code> collection or <code>DbSet</code>. This method accepts <code>IGridifyQuery</code>.</p><h2 id="gridifyqueryable" tabindex="-1">GridifyQueryable <a class="header-anchor" href="#gridifyqueryable" aria-label="Permalink to &quot;GridifyQueryable&quot;">​</a></h2><p>Like <a href="#ApplyFilteringOrderingPaging">ApplyFilteringOrderingPaging</a> but it returns a <code>QueryablePaging&lt;T&gt;</code> that has an extra <code>int Count</code> value that can be used for pagination.</p><h2 id="gridify" tabindex="-1">Gridify <a class="header-anchor" href="#gridify" aria-label="Permalink to &quot;Gridify&quot;">​</a></h2><p>This is an ALL-IN-ONE package, it accepts <code>IGridifyQuery</code>, applies filtering, ordering, and paging, and returns a <code>Paging&lt;T&gt;</code> object. This method is completely optimized to be used with any <strong>Grid</strong> component.</p>',32)]))}const c=s(n,[["render",p]]);export{g as __pageData,c as default};
